{
  "title": "RemixとAuth0で認証",
  "closed": false,
  "archived": false,
  "created_at": "2022-01-29",
  "comments": [
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "参考\n\nhttps://dev.classmethod.jp/articles/remix-and-auth0/\nhttps://github.com/sergiodxa/remix-auth-auth0\nhttps://github.com/sergiodxa/remix-auth"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## remix-authの導入\n\n```bash\nnpm install remix-auth remix-auth-auth0\n```"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## Remixプロジェクトの作成\n\n```bash\nnpx create-remix@latest your-project-name\n```\n\nサーバーはVercelを選んだが、これは別にどこでもいいと思う(多分)"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## 環境変数のセット\n1. dotenvを導入\n\n```bash \nnpm install dotenv\n```\n2. `app/entry.server.tsx`を編集\ndotenvを読み込むようにする\n```diff tsx:app/entry.server.tsx\n+ import \"dotenv/config\"\nimport ReactDOMServer from \"react-dom/server\"\nimport type { EntryContext } from \"remix\"\nimport { RemixServer } from \"remix\"\n\nexport default function handleRequest(\n    request: Request,\n    responseStatusCode: number,\n    responseHeaders: Headers,\n    remixContext: EntryContext\n) {\n    let markup = ReactDOMServer.renderToString(<RemixServer context={remixContext} url={request.url} />)\n\n    responseHeaders.set(\"Content-Type\", \"text/html\")\n\n    return new Response(\"<!DOCTYPE html>\" + markup, {\n        status: responseStatusCode,\n        headers: responseHeaders,\n    })\n}\n```\n3. `.env`を作成\n\n```bash:.env\nAUTH0_CALLBACK_URL=\"http://localhost:3000/auth/callback\" # callbackで使うurl\nAUTH0_CLIENT_ID=\"hogehogehogehoge\" # auth0のclient id\nAUTH0_CLIENT_SECRET=\"hugahugahugahuga\" # auth0のclient secret\nAUTH0_DOMAIN=\"hogehoge.auth0.com\" # auth0のドメイン\nAUTH0_LOGOUT_URL=\"http://localhost:3000/auth/logout\" # logoutで使うurl\nAUTH0_RETURN_TO_URL=\"http://localhost:3000\" # ログアウトした後にリダイレクトするurl\n```",
      "body_updated_at": "2022-01-29"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## `app/root.tsx`を変更\n```tsx:app/root.tsx\nimport type { LinksFunction, LoaderFunction } from \"remix\"\nimport { Links, LiveReload, Meta, Outlet, Scripts, useCatch, useLoaderData } from \"remix\"\nimport stylesUrl from \"./styles/global.css\"\n\n# スタイルの指定とかはお好みで\nexport let links: LinksFunction = () => {\n    return [{ rel: \"stylesheet\", href: stylesUrl }]\n}\n\nexport let loader: LoaderFunction = async () => {\n    return { date: new Date() }\n}\n\nfunction Document({ children, title }: { children: React.ReactNode; title?: string }) {\n    return (\n        <html lang=\"en\">\n            <head>\n                <meta charSet=\"utf-8\" />\n                <link rel=\"icon\" href=\"/favicon.ico\" type=\"image/ico\" />\n                {title ? <title>{title}</title> : null}\n                <Meta />\n                <Links />\n            </head>\n            <body>\n                  {children}\n                  <Scripts />\n                  {process.env.NODE_ENV === \"development\" && <LiveReload />}\n            </body>\n        </html>\n    )\n}\n\nexport default function App() {\n    let data = useLoaderData()\n\n    return (\n        <Document>\n            <Outlet />\n            <footer>\n                <p>This page was rendered at {data.date.toLocaleString()}</p>\n            </footer>\n        </Document>\n    )\n}\n\nexport function CatchBoundary() {\n    let caught = useCatch()\n\n    switch (caught.status) {\n        case 401:\n        case 404:\n            return (\n                <Document title={`${caught.status} ${caught.statusText}`}>\n                    <h1>\n                        {caught.status} {caught.statusText}\n                    </h1>\n                </Document>\n            )\n\n        default:\n            throw new Error(`Unexpected caught response with status: ${caught.status}`)\n    }\n}\n\nexport function ErrorBoundary({ error }: { error: Error }) {\n    console.error(error)\n\n    return (\n        <Document title=\"Uh-oh!\">\n            <h1>App Error</h1>\n            <pre>{error.message}</pre>\n            <p>Replace this UI with what you want users to see when your app throws uncaught errors.</p>\n        </Document>\n    )\n}\n```"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## modelの作成\n`app/models/user.ts`を作成\n```ts:app/models/user.ts\nexport interface User {\n    email: string\n}\n\nexport async function login(email: string): Promise<User> {\n    return { email }\n}\n```"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## authのセットアップ\n### 1. `app/services`\n`app/services`フォルダを作成し、`app/services/auth.server.ts`と`app/services/session.server.ts`を作成\n\n```ts:app/services/auth.server.ts\nimport { Authenticator } from \"remix-auth\"\nimport { Auth0Strategy, Auth0ExtraParams, Auth0Profile } from \"remix-auth-auth0\"\nimport { login, User } from \"~/models/user\"\nimport { sessionStorage } from \"~/services/session.server\"\n\n// Create an instance of the authenticator, pass a generic with what your\n// strategies will return and will be stored in the session\nexport const authenticator = new Authenticator<User>(sessionStorage)\n\nif (!process.env.AUTH0_CALLBACK_URL) {\n    throw new Error(\"Missing AUTH0_CALLBACK_URL env\")\n}\n\nif (!process.env.AUTH0_CLIENT_ID) {\n    throw new Error(\"Missing AUTH0_CLIENT_ID env\")\n}\n\nif (!process.env.AUTH0_CLIENT_SECRET) {\n    throw new Error(\"Missing AUTH0_CLIENT_SECRET env\")\n}\n\nif (!process.env.AUTH0_DOMAIN) {\n    throw new Error(\"Missing AUTH0_DOMAIN env\")\n}\n\nif (!process.env.AUTH0_LOGOUT_URL) {\n    throw new Error(\"Missing AUTH0_LOGOUT_URL env\")\n}\n\nauthenticator.use(\n    new Auth0Strategy(\n        {\n            callbackURL: process.env.AUTH0_CALLBACK_URL,\n            clientID: process.env.AUTH0_CLIENT_ID,\n            clientSecret: process.env.AUTH0_CLIENT_SECRET,\n            domain: process.env.AUTH0_DOMAIN,\n        },\n        async ({ accessToken, refreshToken, extraParams, profile }) => {\n            // Get the user data from your DB or API using the tokens and profile\n            console.log(profile)\n            return login(profile.emails[0].value)\n        }\n    ),\n    \"auth0\"\n)\n```\n\n```ts:app/services/session.server.ts\n// app/services/session.server.ts\nimport { createCookieSessionStorage } from \"remix\"\n\n// export the whole sessionStorage object\nexport let sessionStorage = createCookieSessionStorage({\n    cookie: {\n        name: \"_session\", // use any name you want here\n        sameSite: \"lax\", // this helps with CSRF\n        path: \"/\", // remember to add this so the cookie will work in all routes\n        httpOnly: true, // for security reasons, make this cookie http only\n        secrets: [\"SeCreT\"], // replace this with an actual secret (よくわからん。多分なんでもいい)\n        secure: process.env.NODE_ENV === \"production\", // enable this in prod only\n    },\n})\n\n// you can also export the methods individually for your own usage\nexport let { getSession, commitSession, destroySession } = sessionStorage\n```\n\n### 2. `app/routes/auth`\n`app/routes/auth`を作成し、\n- `app/routes/auth/callback.tsx`\n- `app/routes/auth/login.tsx`\n- `app/routes/auth/logout.tsx`\nを作成する\n\n```tsx:app/routes/auth/callback.tsx\nimport { LoaderFunction } from \"remix\"\nimport { authenticator } from \"~/services/auth.server\"\n\nexport let loader: LoaderFunction = async ({ request }) => {\n    await authenticator.authenticate(\"auth0\", request, {\n        successRedirect: \"/\",\n        failureRedirect: \"/\",\n    })\n}\n```\n\n```tsx:app/routes/auth/login.tsx\nimport { ActionFunction } from \"remix\"\nimport { authenticator } from \"~/services/auth.server\"\n\nexport let action: ActionFunction = async ({ request }) => {\n    await authenticator.authenticate(\"auth0\", request)\n}\n```\n\n```tsx:app/routes/auth/logout.tsx\nimport { ActionFunction, redirect } from \"remix\"\nimport { destroySession, getSession } from \"~/services/session.server\"\n\nexport const action: ActionFunction = async ({ request }) => {\n    if (!process.env.AUTH0_CLIENT_ID) {\n        throw new Error(\"Missing AUTH0_CLIENT_ID env\")\n    }\n\n    if (!process.env.AUTH0_DOMAIN) {\n        throw new Error(\"Missing AUTH0_DOMAIN env\")\n    }\n\n    if (!process.env.AUTH0_LOGOUT_URL) {\n        throw new Error(\"Missing AUTH0_LOGOUT_URL env\")\n    }\n\n    if (!process.env.AUTH0_RETURN_TO_URL) {\n        throw new Error(\"Missing AUTH0_RETURN_TO_URL env\")\n    }\n\n    const session = await getSession(request.headers.get(\"Cookie\"))\n    const logoutURL = new URL(`https://${process.env.AUTH0_DOMAIN}/v2/logout`)\n    logoutURL.searchParams.set(\"client_id\", process.env.AUTH0_CLIENT_ID)\n    logoutURL.searchParams.set(\"returnTo\", process.env.AUTH0_RETURN_TO_URL)\n    return redirect(logoutURL.toString(), {\n        headers: {\n            \"Set-Cookie\": await destroySession(session),\n        },\n    })\n}\n```\n\n### 3. `app/routes/index.tsx`\n\n```tsx:\nimport { Link, LoaderFunction, MetaFunction, useLoaderData, Form } from \"remix\"\nimport { User } from \"~/models/user\"\nimport { authenticator } from \"~/services/auth.server\"\n\nexport const meta: MetaFunction = () => {\n    return {\n        title: \"Remix Starter\",\n        description: \"Welcome to remix!\",\n    }\n}\n\nexport const loader: LoaderFunction = async ({ request }) => {\n    const user = await authenticator.isAuthenticated(request)\n    return { message: \"this is awesome 😎\", user }\n}\n\nexport default function Index() {\n    const data = useLoaderData<{ user: User; message: string }>()\n\n    return (\n        <div style={{ textAlign: \"center\", padding: 20 }}>\n            <h2>Welcome to Remix!</h2>\n            <p>\n                <a href=\"https://docs.remix.run\">\n                    Check out the docs\n                </a>{\" \"}\n                to get started.\n            </p>\n            <p>Message from the loader: {data.message}</p>\n            <p>\n                <Link to=\"not-found\">Link to 404 not found page.</Link> Clicking this link will land you in your root\n                CatchBoundary component.\n            </p>\n            {!data.user && (\n                <>\n                    <div>Not logged in</div>\n                    <form action=\"/auth/login\" method=\"post\">\n                        <button type=\"submit\">Login</button>\n                    </form>\n                </>\n            )}\n            {data.user && (\n                <>\n                    <div>User: {data.user.email}</Box>\n                    <form action=\"/auth/logout\" method=\"post\">\n                        <button>Logout</button>\n                    </form>\n                </>\n            )}\n        </div>\n    )\n}\n```\n"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## Auth0の設定\n`.env`の内容(再掲)\n```bash:.env\nAUTH0_CALLBACK_URL=\"http://localhost:3000/auth/callback\" # callbackで使うurl\nAUTH0_CLIENT_ID=\"hogehogehogehoge\" # auth0のclient id\nAUTH0_CLIENT_SECRET=\"hugahugahugahuga\" # auth0のclient secret\nAUTH0_DOMAIN=\"hogehoge.auth0.com\" # auth0のドメイン\nAUTH0_LOGOUT_URL=\"http://localhost:3000/auth/logout\" # logoutで使うurl\nAUTH0_RETURN_TO_URL=\"http://localhost:3000\" # ログアウトした後にリダイレクトするurl\n```\n### Basic Information\nDomain→`AUTH0_DOMAIN`\nClient ID→`AUTH0_CLIENT_ID` (`xxx.xx.auth0.com`みたいな感じになってる)\nClient Secret→`AUTH0_CLIENT_SECRET`\n![](https://storage.googleapis.com/zenn-user-upload/5fe4874080c6-20220129.png)\n\n### Application Properties\n多分SPAでいいと思う\n![](https://storage.googleapis.com/zenn-user-upload/d7d99a89ec8a-20220129.png)\n\n### Application URIs\nこの設定をちゃんとやらないとちゃんと認証ができない。\n今回の通りに進める場合は、画像の通りに設定すれば問題ない。\n`Allowed Logout URLs`で設定するURLは**リダイレクト先**のURL(`AUTH0_RETURN_TO_URL`)を入れることに注意してください。\n![](https://storage.googleapis.com/zenn-user-upload/a4cb412a0607-20220129.png =400x)\n\n`Allowed Web Origins`と`Allowed Origins (CORS)`は、ローカルで動かすときはあんま気にしなくていい気がします。独自ドメインを使うときに気を付けておくといいと思います。\n\n\n"
    },
    {
      "author": "platina",
      "created_at": "2022-01-29",
      "body_markdown": "## 実行\n```bash\nnpm run dev\n```\nを実行して http://localhost:3000 にアクセスすると、こんな感じになります。\n(※Chakra UIを使って見た目を若干変えていますが、内容は同じだと思います)\n![](https://storage.googleapis.com/zenn-user-upload/fdb90a5ca108-20220129.png)\n\n`Login`ボタンを押すと、\n![](https://storage.googleapis.com/zenn-user-upload/2f1deafa9e92-20220129.png)\nこのような画面になれば成功です。\nサインイン、サインアップのどちらもちゃんとできるはずです。\n\nサインインすると、https://localhost:3000 に戻され、\n![](https://storage.googleapis.com/zenn-user-upload/0eb40cdc59e0-20220129.png)\nこんな感じでログインに使ったメアドが表示されます。\n"
    }
  ]
}